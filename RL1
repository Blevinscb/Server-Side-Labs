using System.Data;
using System.Xml;

namespace RLab1
{

    public class Program
    {
        public string Name;
        public string Platform;
        public string year;
        public string genre;
        public string publisher;
        public double NaSales;
        public double EuSales;
        public double JpSales;
        public double OtherSales;
        public double GlobalSales;


        //Nintendo

        public static void Main(string[] args)
        {
            string filePath = "C:\\Users\\blevinscb2\\OneDrive - East Tennessee State University\\Server Side Prong Labs\\Lab1Server\\videogames.csv";
            Readin(filePath);

            Console.WriteLine();
        }

        public static void Readin(string filePath)
        {
            //create list
            List<VideoGame> ListOfVG = new List<VideoGame>();
            //creates the steamreader needed
            using (StreamReader sr = new StreamReader(filePath))
            {
                while (!sr.EndOfStream)
                {
                    string[] array = sr.ReadLine().Split(',');

                    VideoGame Game1 = new VideoGame();

                    Game1.Name = array[0];
                    Game1.Platform = array[1];
                    Game1.year = array[2];
                    Game1.genre = array[3];
                    Game1.publisher = array[4];
                    Game1.NaSales = array[5].Trim();
                    Game1.EuSales = array[6];
                    Game1.JpSales = array[7].Trim();
                    Game1.OtherSales = array[8];
                    Game1.GlobalSales = array[9];
                    ListOfVG.Add(Game1);
                }
            }
            List<VideoGame> nintendoList = ListOfVG.Where(VideoGame => VideoGame.publisher == "Nintendo").ToList();
            nintendoList.Sort();

            for (int i = 0; i < nintendoList.Count; i++)
            {
                Console.WriteLine(nintendoList[i]); ;
            }

            decimal PercentageofGames = ListOfVG.Count / nintendoList.Count;
            Math.Round(PercentageofGames, 2);
            Console.WriteLine($" Number of nintendo games is {nintendoList.Count} out of {ListOfVG.Count} all of the games");
            Console.WriteLine($"The percentage of Nintendo games to all games is {PercentageofGames}%");

            List<VideoGame> SelectedGenre = nintendoList.Where(VideoGame => VideoGame.genre == "Role-Playing").ToList();

            for (int i = 0; i < SelectedGenre.Count; i++)
            {
                Console.WriteLine(SelectedGenre[i]); ;
            }
            Console.WriteLine($"Number of nintendogames  {nintendoList.Count} there are {SelectedGenre.Count} number of Role-Playing games " +
                $"the percentage of games is {nintendoList.Count / SelectedGenre.Count}%.");


            Console.WriteLine("Which publisher would you like to insert for look up?");
            string PublisherUser = Console.ReadLine();


            List<VideoGame> PublisherPicked = ListOfVG.Where(VideoGame => VideoGame.publisher == PublisherUser).ToList();

            for (int i = 0; i < PublisherPicked.Count; i++)
            {
                Console.WriteLine(PublisherPicked[i]);
            }
            Console.WriteLine($"There are {ListOfVG.Count} total games of which {PublisherPicked.Count} are made by {PublisherUser} which is {ListOfVG.Count / PublisherPicked.Count}%");

            Console.WriteLine("Which genre would you like to insert for look up?");
            string GenreUser = Console.ReadLine();

            List<VideoGame> GenrePicked = ListOfVG.Where(VideoGame => VideoGame.genre == GenreUser).ToList();

            for (int i = 0; i < GenrePicked.Count; i++)
            {
                Console.Write(GenrePicked[i]);
            }
            Console.WriteLine($"There are {ListOfVG.Count} total games of which {GenrePicked.Count} are of the {GenreUser} genre which is {ListOfVG.Count / GenrePicked.Count}%");
        }
    }
}
namespace RLab1
{
    //implements the ICOmparable and initializes the strings of the videogames 
    public class VideoGame : IComparable<VideoGame>
    {
        public string Name;
        public string Platform;
        public string year;
        public string genre;
        public string publisher;
        public string NaSales;
        public string EuSales;
        public string JpSales;
        public string OtherSales;
        public string GlobalSales;
        public VideoGame videoGame;
        //creates the properties of VideoGames
        public VideoGame()
        {
            Name = string.Empty;
            Platform = string.Empty;
            year = string.Empty;
            genre = "Strategy";
            publisher = string.Empty;
            NaSales = string.Empty;
            EuSales = string.Empty;
            JpSales = string.Empty;
            OtherSales = string.Empty;
            GlobalSales = string.Empty;

        }
        //is the set method essentially for the properties
        public VideoGame(string name, string platform, string year, string genre, string publisher, string naSales, string euSales, string jpSales, string otherSales, string globalSales)
        {
            Name = name;
            Platform = platform;
            this.year = year;
            this.genre = genre;
            this.publisher = publisher;
            NaSales = naSales;
            EuSales = euSales;
            JpSales = jpSales;
            OtherSales = otherSales;
            GlobalSales = globalSales;
        }

        //compares 
        public int CompareTo(VideoGame other)
        {
            if (other == null)
                return 1;

            // ascending order for titles
            return string.Compare(this.Name, other.Name, StringComparison.OrdinalIgnoreCase);
        }
        //toString to produce the right output 
        public override string ToString()
        {
            string VGString = string.Empty;

            VGString += $"Name: {Name}\n";
            VGString += $"Platform: {Platform}\n";
            VGString += $"Year: {year}\n";
            VGString += $"Genre: {genre}\n";
            VGString += $"Publisher: {publisher}\n";
            VGString += $"Na-Sales: {NaSales}\n";
            VGString += $"Eu-Sales: {EuSales}\n";
            VGString += $"Jp-Sales: {JpSales}\n";
            VGString += $"Other Sales: {OtherSales}\n";
            VGString += $"Global Sales: {GlobalSales}\n";

            return VGString;
        }
        //creates a base for an existing video game
        public VideoGame(VideoGame existingVideoGame)
        {

            existingVideoGame.Name = Name;
            existingVideoGame.Platform = Platform;
            existingVideoGame.year = year;
            existingVideoGame.genre = genre;
            existingVideoGame.publisher = publisher;
            existingVideoGame.NaSales = NaSales;
            existingVideoGame.EuSales = EuSales;
            existingVideoGame.JpSales = JpSales;
            existingVideoGame.OtherSales = OtherSales;
            existingVideoGame.GlobalSales = GlobalSales;
        }
       
    }
}
